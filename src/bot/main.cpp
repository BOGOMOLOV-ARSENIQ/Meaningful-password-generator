#include <tgbm/bot.hpp>
#include "pass_generator.h"
#include <iostream>
#include <sstream>

dd::task<void> coro_main(tgbm::bot& bot) {
    co_foreach(tgbm::api::Update upd, bot.updates()) {
        if (auto *msg = upd.get_message(); msg && msg->text) {
            const std::string &txt = *msg->text;
            if (txt.rfind("/pass", 0) == 0) {
                int prob = 20;
                bool valid = true;
                std::istringstream iss(txt);
                std::string cmd;
                iss >> cmd;
                if (!iss.eof()) {
                    iss >> prob;
                    if (iss.fail() || prob < 0 || prob > 100) {
                        valid = false;
                    }
                }
                if (!valid) {
                    co_await bot.api.sendMessage({
                        .chat_id = msg->chat->id,
                        .text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç 0% –¥–æ 100% –ø–æ—Å–ª–µ /pass, –Ω–∞–ø—Ä–∏–º–µ—Ä: /pass 20"
                    });
                } else {
                    auto pwd = generate_password(prob);
                    co_await bot.api.sendMessage({
                        .chat_id = msg->chat->id,
                        .text = "üîê –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å: " + pwd
                    });
                }
            } else {
                co_await bot.api.sendMessage({
                    .chat_id = msg->chat->id,
                    .text = "–û—Ç–ø—Ä–∞–≤—å /pass —á—Ç–æ–±—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å –∏–ª–∏ /pass <–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∑–∞–º–µ–Ω—ã —Å–∏–º–≤–æ–ª–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 20%>"
                });
            }
        }
    }
}

int main() {
    const char* token_cstr = std::getenv("BOT_TOKEN");
    if (!token_cstr) {
        std::cerr << "–ù–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN" << std::endl;
        return 1;
    }
    std::string token(token_cstr);
    tgbm::bot bot{token};

    // bot.commands.add("pass", [&bot](tgbm::api::Message msg) {
    //     auto pwd = generate_password();
    //     bot.api.sendMessage({
    //             .chat_id = msg.chat->id,
    //             .text = "üîê –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å: " + pwd
    //         })
    //         .start_and_detach();
    // });

    coro_main(bot).start_and_detach();
    bot.run();
    
    return 0;
}
